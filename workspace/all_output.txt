First, let's recap the code structure and responsibility of each piece:

`Program` Class - Encapsulates the main behaviour of the console application. In this simple case it just writes "Hello World" to the console output.

`Main` Method - Entry point for the application. It's called when the application is started. Invokes the Console.WriteLine method to output "Hello World".

`ProgramTests` Class - Holds the unit tests for the main program.

`SetUp` Method - Prepares the environment for the testing by redirecting the standard output to a string, which can be analyzed later.

`TearDown` Method - Cleans up the environment after each test.

`Main_PrintsHelloWorld` Method - Test method that verifies if the "Hello World" string is properly outputted to the console.

Now, let's implement the code in files:

Program.cs
```csharp
using System;

public class Program
{
    public static void Main(string[] args)
    {
        System.Console.WriteLine("Hello World");
    }
}
```

ProgramTests.cs
```csharp
using System;
using System.IO;
using NUnit.Framework;

[TestFixture]
public class ProgramTests
{
    private StringWriter stringWriter;

    [SetUp]
    public void SetUp()
    {
        stringWriter = new StringWriter();
        Console.SetOut(stringWriter);
    }

    [Test]
    public void Main_PrintsHelloWorld()
    {
        // Arrange
        string expected = "Hello World" + Environment.NewLine;

        // Act
        Program.Main(new string[] { });

        // Assert
        Assert.AreEqual(expected, stringWriter.GetStringBuilder().ToString());
    }

    [TearDown]
    public void TearDown()
    {
        stringWriter.Close();
    }
}
```

These are all the necessary pieces of code for the "Hello World" Console application in C#, as well as its unit tests.

All parts of the architecture are in the files. The `Program.cs` contains the main application logic and the `ProgramTests.cs` contains the unit tests that validate this logic.